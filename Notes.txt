GIT COMMANDS
git clone "url"
git add .
git commit -m "msg"
git status
git push -u origin branchname
git branch branchname
git checkout branchname
touch filename.txt
-------------------------------------------------------------------------------------------------------------------------------------

SELECTORS
1.element selector(tags)
2.class selector(.classname)
3.id selector(#id)
4.universals selector(*)
5.group selector(element,element)
6.attribute selector(href, src,height,width)
-------------------------------------------------------------------------------------------------------------------------------------

LIST
1.ordered list
2.unordered list
3.descriptive list
-------------------------------------------------------------------------------------------------------------------------------------

NODE COMMANDS
npx create vite@latest "name"
npm install - install node packages 
npm init -y
npm i express  -   server, backend connectivity
npm i nodemon	 - continuous integration and continuous deployment	
npm i ejs


EJS
 EJS simply stands for Embedded Javascript. 
It is a simple templating language/engine that lets its user generate HTML with plain javascript.
It offers an easier way to interpolate (concatenate) strings effectively.

package.json -> scripts change
test("start" : "nodemon server.js")
-------------------------------------------------------------------------------------------------------------------------------------

RENDERING
Render: Render refers to the process of displaying content on the screen, whether in the context of HTML, React, or other technologies. It transforms code into visual elements that users can interact with in a browser or other user interface.

In General
Rendering involves taking the structure, style, and behavior defined in code and converting it into a visual representation.
This can include rendering static elements, dynamic data, or updates based on user interactions or system events.

HTML Rendering
Static by Default:

HTML renders static pages using a document structure defined by tags (<div>, <p>, <img>, etc.).
Any dynamic changes require JavaScript to manipulate the DOM manually.
Direct DOM Manipulation:

Updates are made by directly changing the DOM elements via APIs like document.getElementById or document.querySelector.
Frequent DOM manipulations can be slower as each update involves recalculating styles, layout, and repainting.
Separation of Concerns:

HTML, CSS, and JavaScript are separate. HTML handles structure, CSS handles styling, and JavaScript handles behavior.
Static Pages:

Each change requires a full-page reload unless managed with client-side scripting.
React Rendering
Dynamic by Design:

React uses JSX (JavaScript XML) to combine HTML-like syntax with JavaScript logic, making it easy to create dynamic components.
The UI updates automatically based on changes in state or props.
Virtual DOM:

React does not re-render all elements in the DOM. Instead, React optimizes the rendering process by using a Virtual DOM to efficiently update only the parts of the UI that have changed.

React virtual DOM
React uses a Virtual DOM, which is a lightweight copy of the real DOM. Changes are computed in the Virtual DOM first, and only the necessary updates are applied to the real DOM.
This makes rendering faster and more efficient.
Component-Based Architecture:

UI is broken into reusable components. Each component manages its state and lifecycle.
Updates to one component do not affect the rest of the app unnecessarily.
One-Way Data Binding:

Data flows from parent components to child components, ensuring predictable rendering.
Interactive and Responsive Apps:

React supports dynamic content, routing, and interactivity without full-page reloads.
Declarative Syntax:

Instead of telling React how to update the DOM, you define what the UI should look like at any given state. React takes care of the "how."
Example of Rendering Difference
HTML Rendering:
html
Copy code
<div id="content">Hello, World!</div>
<script>
  document.getElementById('content').innerText = 'Hello, JavaScript!';
</script>
React Rendering:
jsx
Copy code
import React, { useState } from 'react';

function App() {
  const [text, setText] = useState('Hello, World!');

  return (
    <div onClick={() => setText('Hello, React!')}>
      {text}
    </div>
  );
}

export default App;


Key Differences
Feature	HTML	React
Approach	Static	Dynamic and interactive
DOM Interaction	Direct manipulation	Virtual DOM for efficiency
State Management	Manual via JavaScript	Built-in with useState
Reusability	Limited	Component-based for reusability
Performance	Slower for frequent updates	Optimized with Virtual DOM
React is better suited for modern, dynamic web applications, whereas plain HTML is sufficient for static or simple web pages.

-------------------------------------------------------------------------------------------------------------------------------------
HOOKS
useState - state management, re renders the whole component when the value of the state changes.
useEffect - some operation to performed after rendering example when the changes happen to the state variable.
useRef - can be use to reference the DOM elements, tracks the value but not re renders when value changes until the state is changed.
useContext - use to pass props to child components directly avoiding props drilling through all the child components.
useMemo - used for memory optiimization.
-------------------------------------------------------------------------------------------------------------------------------------

STATUS CODES:
1xx informational response (100 – 199)
100 Continue
101 Switching Protocols
102 Processing (WebDAV; RFC 2518)
103 Early Hints (RFC 8297)

2xx success (200 – 299)
200 OK
201 Created
202 Accepted

3xx redirection (300 – 399)
300 Multiple Choices
301 Moved Permanently
302 Found (Previously "Moved temporarily")

4xx client errors (400 – 499)
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found

5xx server errors (500 – 599)
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout
505 HTTP Version Not Supported
-------------------------------------------------------------------------------------------------------------------------------------
HTTP methods(HTTP verbs)
get - return value (insecure)
put - updates whole data
patch - updates particular piece of data
post - create a new data(secure)
delete - delete
-------------------------------------------------------------------------------------------------------------------------------------

MVC architecture
model-view-controller (MVC) is an architectural design pattern that organizes an application's logic into distinct layers, each of which carries out a specific set of tasks.

-------------------------------------------------------------------------------------------------------------------------------------
TIGHTLY COUPLED AND LOOSELY COUPLED
Tightly coupled and loosely coupled are terms used to describe the relationship between components in an application. The main difference between the two is how dependent the components are on each other: 
Tightly coupled
Components are highly dependent on each other, so changes to one component can affect the entire system. This can make the system difficult to scale and maintain.
Loosely coupled
Components are independent of each other, so changes to one component do not affect the others. This makes the system more flexible and easier to maintain.

-------------------------------------------------------------------------------------------------------------------------------------